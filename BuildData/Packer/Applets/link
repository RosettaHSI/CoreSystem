#!/bin/sh
###############################################################################
##                           Copyright (c) 2024                              ##
##                         Rosetta H&S Integrated                            ##
###############################################################################
##  Permission is hereby granted, free of charge, to any person obtaining    ##
##        a copy of this software and associated documentation files         ##
##  (the "Software"), to deal in the Software without restriction, including ##
##     without limitation the right to use, copy, modify, merge, publish,    ##
##     distribute, sublicense, and or sell copies of the Software, and to    ##
##         permit persons to whom the Software is furnished to do so,        ##
##                     subject to the following conditions:                  ##
###############################################################################
## The above copyright notice and this permission notice shall be included   ##
##          in all copies or substantial portions of the Software.           ##
###############################################################################
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS   ##
## OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                ##
## MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.    ##
## IN NO EVENT SHALL THE   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY    ##
## CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT ##
## OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR  ##
## THE USE OR OTHER DEALINGS IN THE SOFTWARE.                                ##
###############################################################################

#===#===#===#===# Global Constants #===#===#===#===#
readonly EXEC_NAME="${0##*/}"
readonly EXEC_DIR=$(dirname $(realpath $0))

#===#===#===#===# Global Variables #===#===#===#===#
ANSI=true
VERBOSE=false
AUTOYES=false
PACKERDIR="/Packages"
DELETE_LINKS=false
IN_PACKERENV=false # Are we inside of the packer env we're trying to link?

#===#===#===#===# Info retrieval for Main App #===#===#===#===#
if [ "$1" = "--info" ]; then
    echo "Link executables from the Packer environment for use in Orion."
    exit
fi

#===#===#===#===# Load Commons #===#===#===#===#
if [ ! "$DATA_DIR" ]; then
    echo " --- [X]: You cannot run Packer utilities manually. Run them properly, with \"packer $EXEC_NAME\""
    exit 100
fi
[ $_PKG_COMMON_LOADED ] || . "$DATA_DIR/Common.sh"

#===#===#===#===# Usage #===#===#===#===#
Usage() {
    if [ $ANSI = false ]; then
        local TXT_BOLD=""
        local TXT_RESET=""
        local TXT_UNDERLINE=""
        local OFF_UNDERLINE=""
    fi
    echo -e ""
    echo -e "${TXT_BOLD}${EXEC_NAME} v${EXEC_VER} -${TXT_RESET} The Link applet for Packer."
    echo -e "  Copyright 2024 - Rosetta HSI. This software comes with absolutely"
    echo -e "  NO WARRANTY and is released under the MIT License."
    echo -e ""
    echo -e "  This utility is automatically ran after ${TXT_BOLD}\"packer add\"${TXT_RESET} and ${TXT_BOLD}\"packer remove\"${TXT_RESET}"
    echo -e "  It is used to make installed packages available to the Orion Operating System."
    echo -e ""
    echo -e "  ${TXT_BOLD}--- Usage: $PACKER_EXEC_NAME $EXEC_NAME [options...]"
    echo -e "       $ $PACKER_EXEC_NAME $EXEC_NAME -v"
    echo -e "       $ $PACKER_EXEC_NAME $EXEC_NAME -o /Packages ${TXT_RESET}"
    echo -e ""
    echo -e "  ${TXT_BOLD}--- Link Flags:"
    echo -e "    ${TXT_BOLD}-o :${TXT_RESET} The path to the Packer environment. By default, this will be \"/Packages\""
    echo -e ""
    echo -e "    ${TXT_BOLD}-D :${TXT_RESET} Delete ALL exported links in the Packer environment."
    echo -e ""
    echo -e "  ${TXT_BOLD}--- Global Flags:"
    echo -e "    ${TXT_BOLD}-h :${TXT_RESET} Display this Help message."
    echo -e ""
    echo -e "    ${TXT_BOLD}-Y :${TXT_RESET} Automatically answers \"y\" to all prompts. DANGEROUS!"
    echo -e ""
    echo -e "    ${TXT_BOLD}-v :${TXT_RESET} Enable verbose logging."
    echo -e ""
    echo -e "    ${TXT_BOLD}-@ :${TXT_RESET} No ANSI escape sequences for color or prompts."
    echo -e ""
    exit $1
}

#===#===#===#===# Read options from cmdline #===#===#===#===#
Get_Options() {
    while getopts @hvYDo: flag
    do
        case "${flag}" in
            @) ANSI=false;;
            h) Usage 0;;
            v) VERBOSE=true;;
            Y) AUTOYES=true;;
            D) DELETE_LINKS="true";;
            o) PACKERDIR="${OPTARG}";;
            *) Usage $ERR_INVALID_OPTION;;
        esac
    done
}

#===#===#===#===# Link Binaries from within its PackerENV #===#===#===#===#

Internal_LinkBin() {
    Log "!!! --- Target PackerEnv IS current PackerEnv --- !!!"
    # Since we are in the current PackerEnv, we have a few special
    # directories to play with.
    # Namely, /.packerenv, and /.rawenv
    # /.packerenv being the fake overlay to $PACKERDIR that is created
    # within the Packer environment.
    # /.rawenv being the TRUE directory visible from the root system.
    # With this, we probably don't need the path to the Packer directory.
    # local PACKERDIR="$1"
    External_LinkBin "/.rawenv"

}

#===#===#===#===# Link Binaries from outside a PackerENV #===#===#===#===#
External_ParseExportFileList() {
    local PACKERDIR="$1"
    local ROOTDIRS="$PACKERDIR/.root/.packerenv/.root"
    local SUBPATH="$2"
    local FILES="$3"

    [ $ANSI = false ] && FG_GREEN2="" && TXT_UNDERLINE="" && TXT_RESET="" \
                      && FG_YELLOW2=""

    for FILE in $FILES; do
        # Skip if already exists
        if [ -f "$PACKERDIR/Binaries/$FILE" ]; then
            Log "Program ${FG_GREEN2}${TXT_UNDERLINE}${FILE}${TXT_RESET} has already been linked."
        else # Create a new link node for the program.
            # Don't create links for busybox utilities
            FILE_REAL=$(realpath "$ROOTDIRS/$SUBPATH/$FILE")
            
            if [[ ! "$FILE_REAL" =~ busybox ]] \
            && [[ ! "$FILE_REAL" =~ bbsuid ]]; then
                Log "${FG_YELLOW2}\"$PACKERDIR/Binaries/$FILE\"${TXT_RESET} is unlinked. Linking"
                echo "#!/System/Protected/Binaries/Rosetta/packer-run" > "$PACKERDIR/Binaries/$FILE"
                echo "$SUBPATH/$FILE" >> "$PACKERDIR/Binaries/$FILE"
                chmod +x "$PACKERDIR/Binaries/$FILE"
                
                Info "Created link for ${FG_GREEN2}${TXT_UNDERLINE}${FILE}${TXT_RESET}"
                
                Log "Creating internal linkage for $FILE"
                # # NOTE: This --V should have a '/' prepended to it.. SHOULD!!!
                ln -s "../.root$SUBPATH/$FILE" "$PACKERDIR/.root/.packerenv/Binaries/$FILE" 2> /dev/null
            fi
        fi
    done
}

External_FindWithin() {
    [ -f "$1/bin/$2" ]      && echo "$1/bin/$2"      && return 0
    [ -f "$1/sbin/$2" ]     && echo "$1/sbin/$2"     && return 0
    [ -f "$1/usr/bin/$2" ]  && echo "$1/usr/bin/$2"  && return 0
    [ -f "$1/usr/sbin/$2" ] && echo "$1/usr/sbin/$2" && return 0

    return 1
}

External_LinkBin() {
    local PACKERDIR="$1"
    local ROOTDIRS="$PACKERDIR/.root/.packerenv/.root"

    #===#===#===> Check for Invalid Binaries
    Log "Checking for invalid links..."
    for LINK in $(ls "$PACKERDIR/Binaries"); do
        local FOUND_PATH=$(External_FindWithin "$ROOTDIRS" "$LINK")
        if [ ! "$FOUND_PATH" ]; then
            Info "Removing link for $LINK"
            # Log "Program \"$LINK\" no longer exists in the Packer Environment. Removing."
            rm "$PACKERDIR/Binaries/$LINK"
            rm "$PACKERDIR/.root/.packerenv/Binaries/$LINK"
        fi
    done

    Log "Creating External linkages"
    FILES_BIN=$(ls "$ROOTDIRS/bin")
    FILES_SBIN=$(ls "$ROOTDIRS/sbin")
    FILES_USR_BIN=$(ls "$ROOTDIRS/usr/bin")
    FILES_USR_SBIN=$(ls "$ROOTDIRS/usr/sbin")

    External_ParseExportFileList "$PACKERDIR" "/bin"      "$FILES_BIN"
    External_ParseExportFileList "$PACKERDIR" "/sbin"     "$FILES_SBIN"
    External_ParseExportFileList "$PACKERDIR" "/usr/bin"  "$FILES_USR_BIN"
    External_ParseExportFileList "$PACKERDIR" "/usr/sbin" "$FILES_USR_SBIN"
}

#===#===#===#===# Update ALL Links #===#===#===#===#
Update_Links() {
    local PACKERDIR="$1"

    [ $ANSI = false ] && FG_BLUE2="" && TXT_RESET=""

    #===#===#===> Link Binaries
    [ $IN_PACKERENV = true ] \
        && Internal_LinkBin "$PACKERDIR"  \
        || External_LinkBin "$PACKERDIR"

    #===#===#===> Link Configs
    local PACKERCFG=""
    [ $IN_PACKERENV = true ] \
        && PACKERCFG="/.packerenv/.root/etc" \
        || PACKERCFG="$PACKERDIR/Configuration"
    
    for FILE in $(ls "/System/Configuration"); do
        if [ -f "$PACKERCFG/$FILE" ] || [ -d "$PACKERCFG/$FILE" ]; then
            Log "Configuration file ${FG_BLUE2}\"$FILE\"${TXT_RESET} already linked"
        else
            ln -s "/System/Configuration/$FILE" "$PACKERCFG/$FILE"
            Log "Created link for System Configuration Entry ${FG_BLUE2}\"$FILE\"${TXT_RESET}"
        fi
    done

}

#===#===#===#===# Entry #===#===#===#===#
Main() {
    #===#===#===> Get Options
    Get_Options "$@"
    
    #===#===#===> Validate Inputs
    PACKERDIR=$(realpath "$PACKERDIR" 2> /dev/null)
    [ "$PACKERDIR" ]    \
        || Error "No Packer environment specified." $ERR_INVALID_OPTION
    [ -d "$PACKERDIR" ] \
        || Error "Specified Packer environment does not exist." $ERR_DIR_NOT_FOUND
    Validate_Environ "$PACKERDIR" \
        || Error "Specified Packer environment is not a valid Packer environment." $ERR_INVALID_OPTION

    #===#===#===> Are we already in Packer?
    if [ -d "/.packerenv" ] || [ -d "/.sysroot" ] || [ -d "/.rawenv" ]; then
        # Is the Packer environment we're in the same as the target?
        PACKER_INODE=$(stat -c %i "$PACKERDIR")
        ENV_INODE=$(stat -c %i "/.packerenv")
        [ $PACKER_INODE = $ENV_INODE ] && IN_PACKERENV=true
    fi
   
    #===#===#===> Run routines
    PACKERDIR_OWNER=$(stat -c %U "$PACKERDIR")
    [ "$PACKERDIR_OWNER" = "$USER" ] || Elevate link $@

    Log "PackerDir    : $PACKERDIR (Owned by $PACKERDIR_OWNER)"
    Log "IN_PACKERENV : $IN_PACKERENV"

    if [ $DELETE_LINKS = true ]; then
        Warn_Prompt "You are attempting to delete all exported links. Continue?"
        if [ ! "$?" = 0 ]; then
            Warn "Aborting."
            exit 0
        fi
        
        if [ $IN_PACKERENV = true ]; then
            # Warn "Deletion within a Packer environment is not yet implemented."
            # rm "/.sysroot/$PACKERDIR/Binaries"/* 2> /dev/null
            rm "/.rawenv/Binaries"/*    2> /dev/null
            rm "/.packerenv/Binaries"/* 2> /dev/null
            for LINK in $(ls /System/Configuration); do
                rm "/.packerenv/Configuration/$LINK" 2> /dev/null
            done
        else
            rm "$PACKERDIR/Binaries"/* 2> /dev/null
            rm "$PACKERDIR/.root/.packerenv/Binaries"/* 2> /dev/null
            for LINK in $(ls /System/Configuration); do
                rm "$PACKERDIR/Configuration/$LINK" 2> /dev/null
            done
        fi
        
        Info "All links deleted."
    else
        Update_Links "$PACKERDIR"
        Info "All links updated."
    fi
}

Main "$@"; exit $?
